Backport some fixes/cleanups from esp-idf in the WPA supplicant, this
seems to make it fail more gracefully when low on memory, for example (as
well as handle timeouts a bit better)
Index: vendor/ESP8266_RTOS_SDK/components/wpa_supplicant/src/eap_peer/eap_peap.c
===================================================================
--- vendor.orig/ESP8266_RTOS_SDK/components/wpa_supplicant/src/eap_peer/eap_peap.c
+++ vendor/ESP8266_RTOS_SDK/components/wpa_supplicant/src/eap_peer/eap_peap.c
@@ -1096,6 +1096,14 @@ eap_peap_process(struct eap_sm *sm, void
 						  data->peap_version, id, pos,
 						  left, &resp);
 
+		if (res < 0) {
+			wpa_printf(MSG_DEBUG,
+				   "EAP-PEAP: TLS processing failed");
+			ret->methodState = METHOD_DONE;
+			ret->decision = DECISION_FAIL;
+			return resp;
+		}
+
 		if (tls_connection_established(sm->ssl_ctx, data->ssl.conn)) {
 			char label[24];
 			wpa_printf(MSG_DEBUG, "EAP-PEAP: TLS done, proceed to Phase 2");
Index: vendor/ESP8266_RTOS_SDK/components/wpa_supplicant/src/esp_supplicant/esp_wpa2.c
===================================================================
--- vendor.orig/ESP8266_RTOS_SDK/components/wpa_supplicant/src/esp_supplicant/esp_wpa2.c
+++ vendor/ESP8266_RTOS_SDK/components/wpa_supplicant/src/esp_supplicant/esp_wpa2.c
@@ -417,7 +417,7 @@ int eap_sm_process_request(struct eap_sm
         return ESP_FAIL;
     }
 
-    if (ehdr->identifier == sm->current_identifier) {
+    if (ehdr->identifier == sm->current_identifier && sm->lastRespData != NULL) {
         /*Retransmit*/
         resp = sm->lastRespData;
         goto send_resp;
@@ -491,7 +491,10 @@ build_nak:
 send_resp:
     if (resp == NULL) {
         wpa_printf(MSG_ERROR, "Response build fail, return.");
-        return ESP_FAIL;
+		wpabuf_free(sm->lastRespData);
+		sm->lastRespData = resp;
+		wpa2_set_eap_state(WPA2_ENT_EAP_STATE_FAIL);
+		return ESP_FAIL;
     }
     ret = eap_sm_send_eapol(sm, resp);
     if (ret == ESP_OK) {
