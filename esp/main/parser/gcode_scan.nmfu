// Parses GCode with just enough precision to extract extrude moves
// Does not do any processing of the gcode, just outputs commands.

hook got_command;

// x is also used to store tool change number
out int{size 8} x_int;
out int{size 8} y_int;
out int{size 8} z_int;
out int{size 8} e_int;
out int{size 8} i_int;
out int{size 8} j_int;

// These are cleared to negative for missing, otherwise they are the number of digits after the decimal point.
out int{size 1} x_decimal = -1;
out int{size 1} y_decimal = -1;
out int{size 1} z_decimal = -1;
out int{size 1} e_decimal = -1;
out int{size 1} i_decimal = -1;
out int{size 1} j_decimal = -1;

// Counts up/down for WIPE(_TOWER)_START
out int{size 1} wipe_nesting = 0;

// used by read_fract
out bool temp_negative = false;

// stores current tool index
out int{size 2, unsigned} tool_index = 0;

// Kept track of by a massive foreach
out int{size 4, unsigned} file_pos = 0;

out enum {
    G_MOVE,
    G_ARC_CW,
    G_ARC_CCW,
    E_RELATIVE_ON,
    E_RELATIVE_OFF,
    G_RELATIVE_ON,
    G_RELATIVE_OFF,
    G_RESET_E
} command_type;

macro read_int(out int, expr negative) {
    foreach {
        /\d*/;
    } do {
        if negative {
            int = [int * 10 - ($last - '0')];
        }
        else {
            int = [int * 10 + ($last - '0')];
        }
    }
}

macro read_positive(out int) {
    int = 0;
    read_int(int, false);
}

macro read_fract(out int, out decimal) {
    int = 0;
    decimal = 0;

    temp_negative = false;
    optional {
        "-";
        temp_negative = true;
    }

    read_int(int, [temp_negative]);

    optional {
        ".";
        foreach {
            read_int(int, [temp_negative]);
        } do {
            decimal = [decimal + 1];
        }
    }
}

macro send_single_command(expr target) {
    command_type = target;
    got_command();
    wait "\n";
    break cmd;
}

parser {
    foreach {
        loop cmds {
            /\s*/;
            loop cmd {
                case {
                    // move to
                    /G0?[0123]/ -> {
                        if $last == '2' {
                            command_type = G_ARC_CW;
                        }
                        elif $last == '3' {
                            command_type = G_ARC_CCW;
                        }
                        else {
                            command_type = G_MOVE;
                        }
                    }
                    // relative modes
                    /G90(\.\d+)?/ -> { send_single_command(G_RELATIVE_OFF); }
                    /G91(\.\d+)?/ -> { send_single_command(G_RELATIVE_ON); }
                    /M82(\.\d+)?/ -> { send_single_command(E_RELATIVE_OFF); }
                    /M83(\.\d+)?/ -> { send_single_command(E_RELATIVE_ON); }
                    /G92(\.\d+)?[^Ee\r\n]+[Ee]-?0/ -> { send_single_command(G_RESET_E); }

                    "T" -> {
                        read_positive(tool_index);
                        wait "\n"; break cmd;
                    }

                    ";" -> {
                        /\s*/;
                        case {
                            /WIPE(_TOWER)?_START/ -> {wipe_nesting = [wipe_nesting + 1];}
                            /WIPE(_TOWER)?_END/   -> {wipe_nesting = [wipe_nesting - 1];}
                            else -> {}
                        }

                        wait "\n"; break cmd;
                    }

                    else -> {wait "\n"; break cmd;}
                }

                optional {
                    ".";
                    /\d+/;
                }

                try {
                    /\s+/;
                }
                catch (nomatch) {
                    // if not exactly G0123 (like G380, etc.), ignore cmd
                    break cmd;
                }

                x_decimal = -1;
                y_decimal = -1;
                z_decimal = -1;
                e_decimal = -1;
                i_decimal = -1;
                j_decimal = -1;

                loop args {
                    try {
                        case {
                            "x"i -> { read_fract(x_int, x_decimal); }
                            "y"i -> { read_fract(y_int, y_decimal); }
                            "z"i -> { read_fract(z_int, z_decimal); }
                            "e"i -> { read_fract(e_int, e_decimal); }
                            "i"i -> { read_fract(i_int, i_decimal); }
                            "j"i -> { read_fract(j_int, j_decimal); }
                        }
                    }
                    catch (nomatch) {
                        optional {
                            /[^\s;]+/;
                        }
                    }
                    case {
                        " " -> {}
                        ";" -> {
                            wait "\n";
                            break args;
                        }
                        "\r\n","\n" -> { break args; }
                    }
                }

                got_command();

                break cmd;
            }
        }
    } do {
        file_pos = [file_pos + 1];  
    }
}
