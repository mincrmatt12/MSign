// Parse a GTFS-realtime feed, running a callback for every stop time found.

// Data sent for each invocation:
out str[16] route_id;
out str[16] stop_id;
out int{size 8} at_time;

hook got_entry;

// Internal state
out int{unsigned, size 8} field_buf = 0;

out int{unsigned, size 4} message_len0 = 0;
out int{unsigned, size 4} message_len1 = 0;
out int{unsigned, size 4} message_len2 = 0;
out int{unsigned, size 4} message_len3 = 0;

out int{size 1} varint_counter = 0;

macro varint() {
    b/[80-FF]*[00-7F]/;
}

// Read a varint into the output "into", clobbering varint_counter
macro read_varint(out into) {
    varint_counter = 0;
    into = 0;
    foreach {
        varint();
    } do {
        into = [into | (($last & 127) << (7 * varint_counter))];
        varint_counter = [varint_counter + 1];
    }
}

// Read n bytes (clobbers n)
macro skip_length(out n) {
    loop {
        if n == 0 {
            break;
        }
        /./;
        n = [n - 1];
    }
}

// Unzig-zag

// handle unknown fields from field_buf
macro handle_unknown() {
    field_buf = [field_buf & 0b111];
    if field_buf == 0 {
        varint();
    }
    elif field_buf == 1 {
        // read 8 bytes
        /.{8}/;
    }
    elif field_buf == 2 {
        // length delimited
        read_varint(field_buf);
        skip_length(field_buf);
    }
    elif field_buf == 5 {
        /.{4}/;
    }
}

macro read_with_length(macro message, out length_tracker) {
    read_varint(length_tracker);
    loop {
        if (length_tracker == 0) { break; }
        foreach {
            message();
        } do {
            length_tracker = [length_tracker - 1];
        }
    }
}

macro StopTimeEvent() { // only called for correct events
    read_varint(field_buf);

    if field_buf == (2 << 3) { // id 2, time
        // read signed int
        read_varint(at_time); // reads time
    }
    else {
        handle_unknown();
    }
}

macro AddToRouteId() {
    route_id += /./;
}

macro AddToStopId() {
    stop_id += /./;
}

macro StopTimeUpdate() {
    read_varint(field_buf);

    if field_buf == ((4 << 3) | 2) {
        read_with_length(AddToStopId, message_len3);
    }
    elif field_buf == ((3 << 3) | 2) {
        read_with_length(StopTimeEvent, message_len3);
    }
    else {
        handle_unknown();
    }
}

macro Trip() {
    read_varint(field_buf);

    if field_buf == ((5 << 3) | 2) {
        read_with_length(AddToRouteId, message_len3);
    }
    else {
        handle_unknown();
    }
}

macro TripUpdate() {
    read_varint(field_buf);

    if field_buf == ((1 << 3) | 2) {
        delete route_id;
        read_with_length(Trip, message_len2);
    }
    elif field_buf == ((2 << 3) | 2) {
        delete stop_id;
        at_time = 0;
        read_with_length(StopTimeUpdate, message_len2);
        got_entry();
    }
    else {
        handle_unknown();
    }
}

macro FeedEntity() {
    read_varint(field_buf);

    if field_buf == ((3 << 3) | 2) { // id 3, trip_update
        read_with_length(TripUpdate, message_len1);
    }
    else {
        handle_unknown();
    }
}

parser {
    // Read FeedMessage
    loop {
        // Read a field
        read_varint(field_buf);
        
        if field_buf == ((2 << 3) | 2) { // field id 2
            // read length
            read_with_length(FeedEntity, message_len0);
        }
        else {
            handle_unknown();
        }
    }
}
